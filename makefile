# To better understand this Makefile:
# TARGET: DEPENDENCY <- Structure of tasks defined here.
# $< <- Takes first dependency (if seperated with space), this can be used as a variable in command.
# $^ <- Takes all dependencies (if seperated with space), this can be used as a variable in command.
# $@ <- Takes target name, this can be used as a variable in command.

# Do not associate target with file name.
.PHONY: all run_client run_server clean
COMPILER=gcc
# Some flags for good coding practices.
CFLAGS=-Wall -Wextra
# Automatically get the version from Git tags. Provide info if uncommited changes.
ifndef VERSION
  VERSION = $(shell git describe --tags --always --dirty)
else
  $(info VERSION is already defined: $(VERSION))
endif

SERVER_TARGET=BattleshipsServer
SERVER_DEPENDENCIES=server.o packets/connection.o graphical/text_formatter.o packets/shared_packets.o utils/timer.o
CLIENT_TARGET=BattleshipsClient
#  -lm (math "libm" library)
CLIENT_DEPENDENCIES=client.o packets/connection.o graphical/text_formatter.o graphical/ui_functions.o packets/shared_packets.o graphical/map.o

# <--- NEXT SECTION IS GENERATED BY AI --->
# Naturally this would be generated by Cmake
# Detect OS and Homebrew prefix (works for Intel/ARM)
UNAME_S := $(shell uname -s)
BREW_PREFIX := $(shell brew --prefix 2>/dev/null)

# Try pkg-config first (preferred on macOS & Linux if available)
PKGCONF_DIR := $(BREW_PREFIX)/lib/pkgconfig
RAYLIB_PC := $(PKGCONF_DIR)/raylib.pc

# Default (empty) in case raylib not installed
RAYLIB_CFLAGS :=
RAYLIB_LDFLAGS :=

ifeq ($(UNAME_S),Darwin)
  $(info Detected OS: Darwin)

  # If pkg-config file exists, use it
  ifneq ("$(wildcard $(RAYLIB_PC))","")
    export PKG_CONFIG_PATH := $(PKGCONF_DIR):$(PKG_CONFIG_PATH)
    RAYLIB_CFLAGS := $(shell pkg-config --cflags raylib)
    RAYLIB_LDFLAGS := $(shell pkg-config --libs raylib)
  else
    # Fallback: link directly via Homebrew prefix + frameworks
    RAYLIB_CFLAGS := -I$(BREW_PREFIX)/include
    RAYLIB_LDFLAGS := -L$(BREW_PREFIX)/lib -lraylib \
      -framework Cocoa -framework IOKit -framework CoreVideo -framework OpenGL
  endif

  # On macOS, don't use the vendored Linux/old-arch static lib
  CLIENT_EXT_DEPENDENCIES :=
else
  $(info Detected OS: Other than Darwin)

  # Linux: if pkg-config is available, prefer it
  ifneq ($(shell pkg-config --exists raylib && echo yes),)
    RAYLIB_CFLAGS := $(shell pkg-config --cflags raylib)
    RAYLIB_LDFLAGS := $(shell pkg-config --libs raylib)
  else
    # Fallback to vendored Linux static lib + typical deps
    CLIENT_EXT_DEPENDENCIES = external_libraries/raylib-5.0_linux_amd64/lib/libraylib.a
    RAYLIB_LDFLAGS := -lm -lpthread -ldl -lrt
  endif
endif
# <--- END OF AI GENERATED SECTION --->

# Other possibly required ones: -lraylib -lGL -lpthread -ldl -lrt -lX11


all: $(SERVER_TARGET) $(CLIENT_TARGET)

# Here double quotes within single quotes '"$(VERSION)"' are used because VScode doesn't show any warnings this way.
# Other working way is to use backslash \"$(VERSION)\" although it is working there was IDE warning within C code.
%.o: %.c
	$(COMPILER) $(CFLAGS) $(RAYLIB_CFLAGS) -DBATTLESHIPS_VERSION='"$(VERSION)"' -c $< -o $@

$(SERVER_TARGET): $(SERVER_DEPENDENCIES)
	$(info Compiling $@ Version: $(VERSION))
	$(COMPILER) $(CFLAGS) $^ -o $@

$(CLIENT_TARGET): $(CLIENT_DEPENDENCIES) $(CLIENT_EXT_DEPENDENCIES)
	$(info Compiling $@ Version: $(VERSION))
	$(COMPILER) $(CFLAGS) $^ -o $@ $(RAYLIB_LDFLAGS)

run_server: $(SERVER_TARGET)
	./$(SERVER_TARGET)

run_client: $(CLIENT_TARGET)
	./$(CLIENT_TARGET)

clean:
	rm -f *.o *.out
	rm -f $(SERVER_TARGET)
	rm -f $(CLIENT_TARGET)
	rm -f $(SERVER_DEPENDENCIES)
	rm -f $(CLIENT_DEPENDENCIES)
